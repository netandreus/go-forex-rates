// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package api

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "netandreus@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/netandreus/go-forex-rates/blob/master/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/historical/{provider}/{date}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get historical currency rates",
                "parameters": [
                    {
                        "enum": [
                            "emirates",
                            "fixer"
                        ],
                        "type": "string",
                        "description": "Provider",
                        "name": "provider",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Rates date (format YYYY-MM-DD)",
                        "name": "date",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Base currency",
                        "name": "base",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Quoted currencies, comme separated",
                        "name": "symbols",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Force do not use any cache",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SuccessApiResponse"
                        }
                    }
                }
            }
        },
        "/latest/{provider}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get latest currency rates",
                "parameters": [
                    {
                        "enum": [
                            "emirates",
                            "fixer"
                        ],
                        "type": "string",
                        "description": "Provider",
                        "name": "provider",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Base currency",
                        "name": "base",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Quoted currencies, comme separated",
                        "name": "symbols",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Force do not use any cache (except emirates-latest combination)",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SuccessApiResponse"
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Using for microservice health-check by Docker",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PingApiResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.PingApiResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message is service response as string",
                    "type": "string"
                }
            }
        },
        "model.SuccessApiResponse": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Base the three-letter currency code of the base currency used for this request.",
                    "type": "string"
                },
                "date": {
                    "description": "Date date for which historical rates were requested.",
                    "type": "string"
                },
                "historical": {
                    "description": "Historical true if a request for historical exchange rates was made.",
                    "type": "boolean"
                },
                "rates": {
                    "description": "Rates exchange rate data for the currencies you have requested.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "success": {
                    "description": "Success true or false depending on whether or not your API request has succeeded.",
                    "type": "boolean"
                },
                "timestamp": {
                    "description": "Timestamp the exact date and time (UNIX time stamp) the given rates were collected.",
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "Go-forex-rates HTTP REST API server",
	Description: "Microservice for obtaining exchange rates",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
